// Code generated by mockery v2.52.3. DO NOT EDIT.

package logfx_mock

import (
	logfx "github.com/eser/ajan/logfx"
	mock "github.com/stretchr/testify/mock"
)

// StackTracer is an autogenerated mock type for the StackTracer type
type StackTracer struct {
	mock.Mock
}

type StackTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *StackTracer) EXPECT() *StackTracer_Expecter {
	return &StackTracer_Expecter{mock: &_m.Mock}
}

// StackTrace provides a mock function with no fields
func (_m *StackTracer) StackTrace() logfx.StackTrace {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StackTrace")
	}

	var r0 logfx.StackTrace
	if rf, ok := ret.Get(0).(func() logfx.StackTrace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logfx.StackTrace)
		}
	}

	return r0
}

// StackTracer_StackTrace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StackTrace'
type StackTracer_StackTrace_Call struct {
	*mock.Call
}

// StackTrace is a helper method to define mock.On call
func (_e *StackTracer_Expecter) StackTrace() *StackTracer_StackTrace_Call {
	return &StackTracer_StackTrace_Call{Call: _e.mock.On("StackTrace")}
}

func (_c *StackTracer_StackTrace_Call) Run(run func()) *StackTracer_StackTrace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StackTracer_StackTrace_Call) Return(_a0 logfx.StackTrace) *StackTracer_StackTrace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StackTracer_StackTrace_Call) RunAndReturn(run func() logfx.StackTrace) *StackTracer_StackTrace_Call {
	_c.Call.Return(run)
	return _c
}

// NewStackTracer creates a new instance of StackTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStackTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *StackTracer {
	mock := &StackTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

---
description:
globs:
alwaysApply: true
---
### General Responsibilities:
- Guide the development of idiomatic, maintainable, and high-performance Go code.
- Enforce modular design and separation of concerns through Hexagonal Architecture.
- Promote test-driven development, robust observability, and scalable patterns across applications and layers.

### Architecture Patterns:
- Apply **Hexagonal Architecture** by structuring code into adapters and domain/business. Ports should be interfaces defined along with domains. And all composition is done in the composition root.
- Use **domain-driven design** principles where applicable.
- Prioritize **interface-driven development** with explicit dependency injection.
- Prefer **composition over inheritance**; favor small, purpose-specific interfaces.
- Ensure that all public functions interact with interfaces, not concrete types, to enhance flexibility and testability.

### Project Structure Guidelines:
- Use a consistent project layout:
  - cmd/: application entrypoints
  - docs/: documentation
  - ops/: operation-related files (dockerfiles, grafana dashboards, etc.)
  - pkg/: core application logic, shared utilities and packages
- Don't use these directories:
  - internal/
  - api/
  - configs/
  - test/
- Group code by feature when it improves clarity and cohesion.
- Keep logic decoupled from framework-specific code.

### Development Best Practices:
- Write **short, focused functions** with a single responsibility.
- Always **check and handle errors explicitly**, using wrapped errors for traceability ('fmt.Errorf("%w: %w", ErrSentinelError, err)').
- Avoid **global state**; use constructor functions to inject dependencies.
- Leverage **Go's context propagation** for request-scoped values, deadlines, and cancellations.
- Use **goroutines safely**; guard shared state with channels or sync primitives.
- **Defer closing resources** and handle them carefully to avoid leaks.

### Error Handling:
- Define **sentinel errors** using `errors.New()` for specific error conditions at package level.
- Use **consistent error context** with the pattern `fmt.Errorf("%w (key=%q)", ErrSentinel, value)` for adding context.
- For error wrapping, use `fmt.Errorf("%w: %w", ErrSentinel, err)` to wrap external errors.
- **Avoid dynamic errors** - never use `errors.New()` or `fmt.Errorf()` with dynamic strings inside functions.
- Use **parentheses with key=value pairs** for context: `(name=%q)`, `(protocol=%q)`, `(name=%q, expected=%q, got=%q)`.
- **Name sentinel errors** with descriptive prefixes like `ErrConnectionNotFound`, `ErrInvalidType`, `ErrProtocolMismatch`.
- For functions that can fail in multiple ways, create specific sentinel errors for each failure mode.
- When building complex error messages, use `fmt.Sprintf()` to construct the message, then wrap with sentinel error.

**Examples:**
```go
// ✅ Good: Sentinel errors with context
var (
    ErrConnectionNotFound = errors.New("connection not found")
    ErrInvalidType        = errors.New("invalid type")
    ErrProtocolMismatch   = errors.New("protocol mismatch")
)

func GetConnection(name string) (Connection, error) {
    conn := registry.Get(name)
    if conn == nil {
        return nil, fmt.Errorf("%w (name=%q)", ErrConnectionNotFound, name)
    }
    return conn, nil
}

func ValidateProtocol(name, expected, got string) error {
    if expected != got {
        return fmt.Errorf("%w (name=%q, expected=%q, got=%q)",
            ErrProtocolMismatch, name, expected, got)
    }
    return nil
}

// ✅ Good: Wrapping external errors
func CreateConnection(config Config) error {
    conn, err := external.Connect(config.DSN)
    if err != nil {
        return fmt.Errorf("%w (name=%q): %w", ErrFailedToConnect, config.Name, err)
    }
    return nil
}

// ❌ Bad: Dynamic errors
func BadExample(name string) error {
    return errors.New("connection " + name + " not found") // Don't do this
}

// ❌ Bad: Inconsistent context format
func BadContext(name string) error {
    return fmt.Errorf("%w: %s", ErrConnectionNotFound, name) // Use (name=%q) instead
}

### Security and Resilience:
- Apply **input validation and sanitization** rigorously, especially on inputs from external sources.
- Use secure defaults for **JWT, cookies**, and configuration settings.
- Isolate sensitive operations with clear **permission boundaries**.
- Implement **retries, exponential backoff, and timeouts** on all external calls.
- Use **circuit breakers and rate limiting** for service protection.
- Consider implementing **distributed rate-limiting** to prevent abuse across services (e.g., using Redis).

### Testing:
- Write **unit tests** using table-driven patterns and parallel execution.
- **Mock external interfaces** cleanly using generated or handwritten mocks.
- Separate **fast unit tests** from slower integration and E2E tests.
- Ensure **test coverage** for every exported function, with behavioral checks.
- Use tools like 'go test -cover' to ensure adequate test coverage.
- **Test errors using sentinel error checking** with `assert.ErrorIs(t, err, ErrExpected)` instead of string matching.
- **Avoid testing error messages** with `assert.Contains(t, err.Error(), "message")` - use sentinel errors instead.
- **Test both success and failure paths** for all functions that return errors.
- **Use require.NoError()** for setup operations that must succeed, **assert.Error()** for expected failures.

**Error Testing Examples:**
```go
// ✅ Good: Test using sentinel errors
func TestGetConnection_NotFound(t *testing.T) {
    manager := NewManager()

    _, err := manager.GetConnection("nonexistent")
    assert.Error(t, err)
    assert.ErrorIs(t, err, ErrConnectionNotFound)
}

func TestValidateProtocol_Mismatch(t *testing.T) {
    err := ValidateProtocol("db", "postgres", "mysql")
    assert.Error(t, err)
    assert.ErrorIs(t, err, ErrProtocolMismatch)
    // You can still check context if needed
    assert.Contains(t, err.Error(), `expected="postgres"`)
    assert.Contains(t, err.Error(), `got="mysql"`)
}

// ✅ Good: Test error wrapping
func TestCreateConnection_ExternalError(t *testing.T) {
    mockConfig := Config{Name: "test", DSN: "invalid"}

    err := CreateConnection(mockConfig)
    assert.Error(t, err)
    assert.ErrorIs(t, err, ErrFailedToConnect)
    // Verify the wrapped error is preserved
    assert.ErrorContains(t, err, "test")
}

// ❌ Bad: Testing error strings
func TestBadErrorTesting(t *testing.T) {
    _, err := manager.GetConnection("nonexistent")
    assert.Error(t, err)
    assert.Contains(t, err.Error(), "connection not found") // Fragile!
}

// ✅ Good: Table-driven error tests
func TestGetConnection_Errors(t *testing.T) {
    tests := []struct {
        name        string
        connName    string
        expectedErr error
        setup       func(*Manager)
    }{
        {
            name:        "connection not found",
            connName:    "nonexistent",
            expectedErr: ErrConnectionNotFound,
        },
        {
            name:        "nil connection name",
            connName:    "",
            expectedErr: ErrInvalidConnectionName,
        },
    }

    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            manager := NewManager()
            if tt.setup != nil {
                tt.setup(manager)
            }

            _, err := manager.GetConnection(tt.connName)
            assert.Error(t, err)
            assert.ErrorIs(t, err, tt.expectedErr)
        })
    }
}

### Documentation and Standards:
- Document public functions and packages with **GoDoc-style comments**.
- Provide concise **READMEs** for services and libraries.
- Maintain a 'CONTRIBUTING.md' and 'ARCHITECTURE.md' to guide team practices.
- Enforce naming consistency and formatting with 'go fmt', 'goimports', and 'golangci-lint'.

### Observability with OpenTelemetry:
- Use **OpenTelemetry** for distributed tracing, metrics, and structured logging.
- Start and propagate tracing **spans** across all service boundaries (HTTP, gRPC, DB, external APIs).
- Always attach 'context.Context' to spans, logs, and metric exports.
- Use **otel.Tracer** for creating spans and **otel.Meter** for collecting metrics.
- Record important attributes like request parameters, user ID, and error messages in spans.
- Use **log correlation** by injecting trace IDs into structured logs.
- Export data to **OpenTelemetry Collector**, **Jaeger**, or **Prometheus**.

### Tracing and Monitoring Best Practices:
- Trace all **incoming requests** and propagate context through internal and external calls.
- Use **middleware** to instrument HTTP and gRPC endpoints automatically.
- Annotate slow, critical, or error-prone paths with **custom spans**.
- Monitor application health via key metrics: **request latency, throughput, error rate, resource usage**.
- Define **SLIs** (e.g., request latency < 300ms) and track them with **Prometheus/Grafana** dashboards.
- Alert on key conditions (e.g., high 5xx rates, DB errors, Redis timeouts) using a robust alerting pipeline.
- Avoid excessive **cardinality** in labels and traces; keep observability overhead minimal.
- Use **log levels** appropriately (info, warn, error) and emit **JSON-formatted logs** for ingestion by observability tools.
- Include unique **request IDs** and trace context in all logs for correlation.

### Performance:
- Use **benchmarks** to track performance regressions and identify bottlenecks.
- Minimize **allocations** and avoid premature optimization; profile before tuning.
- Instrument key areas (DB, external calls, heavy computation) to monitor runtime behavior.

### Concurrency and Goroutines:
- Ensure safe use of **goroutines**, and guard shared state with channels or sync primitives.
- Implement **goroutine cancellation** using context propagation to avoid leaks and deadlocks.

### Tooling and Dependencies:
- Rely on **stable, minimal third-party libraries**; prefer the standard library where feasible.
- Use **Go modules** for dependency management and reproducibility.
- Version-lock dependencies for deterministic builds.
- Integrate **linting, testing, and security checks** in CI pipelines.

### Key Conventions:
1. Prioritize **readability, simplicity, and maintainability**.
2. Design for **change**: isolate business logic and minimize framework lock-in.
3. Emphasize clear **boundaries** and **dependency inversion**.
4. Ensure all behavior is **observable, testable, and documented**.
5. **Automate workflows** for testing, building, and deployment.

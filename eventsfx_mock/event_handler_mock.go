// Code generated by mockery v2.52.3. DO NOT EDIT.

package eventsfx_mock

import (
	eventsfx "github.com/eser/ajan/eventsfx"
	mock "github.com/stretchr/testify/mock"
)

// EventHandler is an autogenerated mock type for the EventHandler type
type EventHandler struct {
	mock.Mock
}

type EventHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *EventHandler) EXPECT() *EventHandler_Expecter {
	return &EventHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: event
func (_m *EventHandler) Execute(event eventsfx.Event) {
	_m.Called(event)
}

// EventHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type EventHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - event eventsfx.Event
func (_e *EventHandler_Expecter) Execute(event interface{}) *EventHandler_Execute_Call {
	return &EventHandler_Execute_Call{Call: _e.mock.On("Execute", event)}
}

func (_c *EventHandler_Execute_Call) Run(run func(event eventsfx.Event)) *EventHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(eventsfx.Event))
	})
	return _c
}

func (_c *EventHandler_Execute_Call) Return() *EventHandler_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventHandler_Execute_Call) RunAndReturn(run func(eventsfx.Event)) *EventHandler_Execute_Call {
	_c.Run(run)
	return _c
}

// NewEventHandler creates a new instance of EventHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventHandler {
	mock := &EventHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

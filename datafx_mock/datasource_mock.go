// Code generated by mockery v2.52.3. DO NOT EDIT.

package datafx_mock

import (
	context "context"

	datafx "github.com/eser/ajan/datafx"
	mock "github.com/stretchr/testify/mock"
)

// Datasource is an autogenerated mock type for the Datasource type
type Datasource struct {
	mock.Mock
}

type Datasource_Expecter struct {
	mock *mock.Mock
}

func (_m *Datasource) EXPECT() *Datasource_Expecter {
	return &Datasource_Expecter{mock: &_m.Mock}
}

// GetConnection provides a mock function with no fields
func (_m *Datasource) GetConnection() datafx.SqlExecutor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnection")
	}

	var r0 datafx.SqlExecutor
	if rf, ok := ret.Get(0).(func() datafx.SqlExecutor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datafx.SqlExecutor)
		}
	}

	return r0
}

// Datasource_GetConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnection'
type Datasource_GetConnection_Call struct {
	*mock.Call
}

// GetConnection is a helper method to define mock.On call
func (_e *Datasource_Expecter) GetConnection() *Datasource_GetConnection_Call {
	return &Datasource_GetConnection_Call{Call: _e.mock.On("GetConnection")}
}

func (_c *Datasource_GetConnection_Call) Run(run func()) *Datasource_GetConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Datasource_GetConnection_Call) Return(_a0 datafx.SqlExecutor) *Datasource_GetConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datasource_GetConnection_Call) RunAndReturn(run func() datafx.SqlExecutor) *Datasource_GetConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetDialect provides a mock function with no fields
func (_m *Datasource) GetDialect() datafx.Dialect {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDialect")
	}

	var r0 datafx.Dialect
	if rf, ok := ret.Get(0).(func() datafx.Dialect); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(datafx.Dialect)
	}

	return r0
}

// Datasource_GetDialect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDialect'
type Datasource_GetDialect_Call struct {
	*mock.Call
}

// GetDialect is a helper method to define mock.On call
func (_e *Datasource_Expecter) GetDialect() *Datasource_GetDialect_Call {
	return &Datasource_GetDialect_Call{Call: _e.mock.On("GetDialect")}
}

func (_c *Datasource_GetDialect_Call) Run(run func()) *Datasource_GetDialect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Datasource_GetDialect_Call) Return(_a0 datafx.Dialect) *Datasource_GetDialect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datasource_GetDialect_Call) RunAndReturn(run func() datafx.Dialect) *Datasource_GetDialect_Call {
	_c.Call.Return(run)
	return _c
}

// UseUnitOfWork provides a mock function with given fields: ctx
func (_m *Datasource) UseUnitOfWork(ctx context.Context) (*datafx.UnitOfWork, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UseUnitOfWork")
	}

	var r0 *datafx.UnitOfWork
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*datafx.UnitOfWork, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *datafx.UnitOfWork); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datafx.UnitOfWork)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Datasource_UseUnitOfWork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseUnitOfWork'
type Datasource_UseUnitOfWork_Call struct {
	*mock.Call
}

// UseUnitOfWork is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Datasource_Expecter) UseUnitOfWork(ctx interface{}) *Datasource_UseUnitOfWork_Call {
	return &Datasource_UseUnitOfWork_Call{Call: _e.mock.On("UseUnitOfWork", ctx)}
}

func (_c *Datasource_UseUnitOfWork_Call) Run(run func(ctx context.Context)) *Datasource_UseUnitOfWork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Datasource_UseUnitOfWork_Call) Return(_a0 *datafx.UnitOfWork, _a1 error) *Datasource_UseUnitOfWork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Datasource_UseUnitOfWork_Call) RunAndReturn(run func(context.Context) (*datafx.UnitOfWork, error)) *Datasource_UseUnitOfWork_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatasource creates a new instance of Datasource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatasource(t interface {
	mock.TestingT
	Cleanup(func())
}) *Datasource {
	mock := &Datasource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

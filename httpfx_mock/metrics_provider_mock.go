// Code generated by mockery v2.52.3. DO NOT EDIT.

package httpfx_mock

import (
	prometheus "github.com/prometheus/client_golang/prometheus"
	mock "github.com/stretchr/testify/mock"
)

// MetricsProvider is an autogenerated mock type for the MetricsProvider type
type MetricsProvider struct {
	mock.Mock
}

type MetricsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MetricsProvider) EXPECT() *MetricsProvider_Expecter {
	return &MetricsProvider_Expecter{mock: &_m.Mock}
}

// GetRegistry provides a mock function with no fields
func (_m *MetricsProvider) GetRegistry() *prometheus.Registry {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRegistry")
	}

	var r0 *prometheus.Registry
	if rf, ok := ret.Get(0).(func() *prometheus.Registry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*prometheus.Registry)
		}
	}

	return r0
}

// MetricsProvider_GetRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegistry'
type MetricsProvider_GetRegistry_Call struct {
	*mock.Call
}

// GetRegistry is a helper method to define mock.On call
func (_e *MetricsProvider_Expecter) GetRegistry() *MetricsProvider_GetRegistry_Call {
	return &MetricsProvider_GetRegistry_Call{Call: _e.mock.On("GetRegistry")}
}

func (_c *MetricsProvider_GetRegistry_Call) Run(run func()) *MetricsProvider_GetRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsProvider_GetRegistry_Call) Return(_a0 *prometheus.Registry) *MetricsProvider_GetRegistry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsProvider_GetRegistry_Call) RunAndReturn(run func() *prometheus.Registry) *MetricsProvider_GetRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetricsProvider creates a new instance of MetricsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricsProvider {
	mock := &MetricsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.52.3. DO NOT EDIT.

package httpfx_mock

import (
	httpfx "github.com/eser/ajan/httpfx"
	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

type Handler_Expecter struct {
	mock *mock.Mock
}

func (_m *Handler) EXPECT() *Handler_Expecter {
	return &Handler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *Handler) Execute(_a0 *httpfx.Context) httpfx.Result {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 httpfx.Result
	if rf, ok := ret.Get(0).(func(*httpfx.Context) httpfx.Result); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(httpfx.Result)
	}

	return r0
}

// Handler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Handler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *httpfx.Context
func (_e *Handler_Expecter) Execute(_a0 interface{}) *Handler_Execute_Call {
	return &Handler_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *Handler_Execute_Call) Run(run func(_a0 *httpfx.Context)) *Handler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*httpfx.Context))
	})
	return _c
}

func (_c *Handler_Execute_Call) Return(_a0 httpfx.Result) *Handler_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handler_Execute_Call) RunAndReturn(run func(*httpfx.Context) httpfx.Result) *Handler_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.52.3. DO NOT EDIT.

package cachefx_mock

import (
	context "context"

	cachefx "github.com/eser/ajan/cachefx"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, key
func (_m *Cache) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Cache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Cache_Expecter) Delete(ctx interface{}, key interface{}) *Cache_Delete_Call {
	return &Cache_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *Cache_Delete_Call) Run(run func(ctx context.Context, key string)) *Cache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_Delete_Call) Return(_a0 error) *Cache_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Delete_Call) RunAndReturn(run func(context.Context, string) error) *Cache_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *Cache) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Cache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Cache_Expecter) Get(ctx interface{}, key interface{}) *Cache_Get_Call {
	return &Cache_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *Cache_Get_Call) Run(run func(ctx context.Context, key string)) *Cache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_Get_Call) Return(_a0 string, _a1 error) *Cache_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_Get_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Cache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetDialect provides a mock function with no fields
func (_m *Cache) GetDialect() cachefx.Dialect {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDialect")
	}

	var r0 cachefx.Dialect
	if rf, ok := ret.Get(0).(func() cachefx.Dialect); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cachefx.Dialect)
	}

	return r0
}

// Cache_GetDialect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDialect'
type Cache_GetDialect_Call struct {
	*mock.Call
}

// GetDialect is a helper method to define mock.On call
func (_e *Cache_Expecter) GetDialect() *Cache_GetDialect_Call {
	return &Cache_GetDialect_Call{Call: _e.mock.On("GetDialect")}
}

func (_c *Cache_GetDialect_Call) Run(run func()) *Cache_GetDialect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_GetDialect_Call) Return(_a0 cachefx.Dialect) *Cache_GetDialect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_GetDialect_Call) RunAndReturn(run func() cachefx.Dialect) *Cache_GetDialect_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, expiration
func (_m *Cache) Set(ctx context.Context, key string, value any, expiration time.Duration) error {
	ret := _m.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, any, time.Duration) error); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Cache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value any
//   - expiration time.Duration
func (_e *Cache_Expecter) Set(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *Cache_Set_Call {
	return &Cache_Set_Call{Call: _e.mock.On("Set", ctx, key, value, expiration)}
}

func (_c *Cache_Set_Call) Run(run func(ctx context.Context, key string, value any, expiration time.Duration)) *Cache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(any), args[3].(time.Duration))
	})
	return _c
}

func (_c *Cache_Set_Call) Return(_a0 error) *Cache_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Set_Call) RunAndReturn(run func(context.Context, string, any, time.Duration) error) *Cache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

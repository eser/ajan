// Code generated by mockery v2.52.3. DO NOT EDIT.

package configfx_mock

import mock "github.com/stretchr/testify/mock"

// ConfigResource is an autogenerated mock type for the ConfigResource type
type ConfigResource struct {
	mock.Mock
}

type ConfigResource_Expecter struct {
	mock *mock.Mock
}

func (_m *ConfigResource) EXPECT() *ConfigResource_Expecter {
	return &ConfigResource_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: target
func (_m *ConfigResource) Execute(target *map[string]any) error {
	ret := _m.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*map[string]any) error); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfigResource_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type ConfigResource_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - target *map[string]any
func (_e *ConfigResource_Expecter) Execute(target interface{}) *ConfigResource_Execute_Call {
	return &ConfigResource_Execute_Call{Call: _e.mock.On("Execute", target)}
}

func (_c *ConfigResource_Execute_Call) Run(run func(target *map[string]any)) *ConfigResource_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*map[string]any))
	})
	return _c
}

func (_c *ConfigResource_Execute_Call) Return(_a0 error) *ConfigResource_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConfigResource_Execute_Call) RunAndReturn(run func(*map[string]any) error) *ConfigResource_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfigResource creates a new instance of ConfigResource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigResource(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigResource {
	mock := &ConfigResource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
